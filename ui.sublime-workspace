{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"col_",
				"col_grey\t(sdlui_structs.cpp)"
			],
			[
				"scroll",
				"scroll_area\tabc"
			],
			[
				"SDLUI_Control",
				"SDLUI_Control_SliderInt\tabc"
			],
			[
				"SDLUI_Cont",
				"SDLUI_Control_SliderInt\t(sdlui_structs.cpp)"
			],
			[
				"color",
				"color_slider1\tabc"
			],
			[
				"SDLUI_ORI",
				"SDLUI_ORIENTATION_VERTICAL\tabc"
			],
			[
				"scrol",
				"scroll_area\tabc"
			],
			[
				"SDL_Des",
				"SDL_DestroyTexture\t(sdlui_helpers.cpp)"
			],
			[
				"num",
				"num_items\tabc"
			],
			[
				"col_scroll",
				"col_scrollbar_track\tabc"
			],
			[
				"co",
				"content_height\tabc"
			],
			[
				"scrll",
				"scrollbar_thickness\tabc"
			],
			[
				"clie",
				"client_height\tabc"
			],
			[
				"cli",
				"client_height\tabc"
			],
			[
				"client",
				"client_width\tabc"
			],
			[
				"offse",
				"offset_y\tabc"
			],
			[
				"conte",
				"content_width\tabc"
			],
			[
				"cont",
				"content_width\tabc"
			],
			[
				"SDL_Render",
				"SDL_RenderPresent\t(main.cpp)"
			],
			[
				"scro",
				"scroll_area\tabc"
			],
			[
				"SDL_Set",
				"SDL_SetRenderTarget\tabc"
			],
			[
				"visi",
				"visible_items_v\tabc"
			],
			[
				"list",
				"list_items\t(sdlui_demo_controls_create.cpp)"
			],
			[
				"SDLUI_CONT",
				"SDLUI_CONTROL_TYPE_LIST\t(sdlui_enums.cpp)"
			],
			[
				"SDLUI_Contr",
				"SDLUI_Control_List\tabc"
			],
			[
				"offset",
				"offset_y\tabc"
			],
			[
				"ratio",
				"ratio_y\tabc"
			],
			[
				"conten",
				"content_width\tabc"
			],
			[
				"SDL_Crea",
				"SDL_CreateTextureFromSurface\t(sdlui_helpers.cpp)"
			],
			[
				"IM",
				"IMG_LoadPNG_RW\t(sdlui_helpers.cpp)"
			],
			[
				"tex",
				"tex_rect\t(sdlui_helpers.cpp)"
			],
			[
				"thum",
				"thumb_size_h\t(sdlui_structs.cpp)"
			],
			[
				"tra",
				"track_length_v\tabc"
			],
			[
				"thumb",
				"thumb_size_v\tabc"
			],
			[
				"old",
				"old_scroll_y\tabc"
			],
			[
				"scr",
				"scrollbar_length_v\t(sdlui_structs.cpp)"
			],
			[
				"old_",
				"old_my\tabc"
			],
			[
				"scrollbar",
				"scrollbar_thickness\tabc"
			],
			[
				"scrollbar_le",
				"scrollbar_length_v\t(sdlui_structs.cpp)"
			],
			[
				"thu",
				"thumb_size_v\tabc"
			],
			[
				"SDL_SetR",
				"SDL_SetRenderDrawColor\t(main.cpp)"
			],
			[
				"scree",
				"screen_texture\tabc"
			],
			[
				"SDL_Rende",
				"SDL_RenderCopy\t(render.cpp)"
			],
			[
				"scre",
				"screen_texture\tabc"
			],
			[
				"the",
				"theme\t(sdlui_render.cpp)"
			],
			[
				"do",
				"do_process\tabc"
			],
			[
				"SDLUI_Creat",
				"SDLUI_CreateButton\tabc"
			],
			[
				"SDLUI_Control_",
				"SDLUI_Control_Button\tabc"
			],
			[
				"activ",
				"active_tab\tabc"
			],
			[
				"swit",
				"switch\tswitch"
			],
			[
				"swi",
				"switch\tswitch"
			],
			[
				"col",
				"col_base\t(sdlui_structs.cpp)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.cpp",
			"settings":
			{
				"buffer_size": 2189,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "sdlui_helpers.cpp",
			"settings":
			{
				"buffer_size": 11599,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdlui_structs.cpp",
			"settings":
			{
				"buffer_size": 6848,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdlui_create.cpp",
			"settings":
			{
				"buffer_size": 7736,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Usage\nbool SDLUI_Window(SDLUI_Control_Window *wnd)\n{\n\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_RELEASED || SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_NONE)\n\t{\n\t\twnd->is_dragged = false;\n\t}\n\n\tif(wnd == SDLUI_Core.active_window)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\n\t\tSDL_Rect r = {wnd->x, wnd->y, wnd->w, wnd->h};\n\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\twnd->is_hovered = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twnd->is_hovered = false;\n\t\t}\n\n\t\tr = {wnd->x + wnd->w - 30, wnd->y, 30, 30};\n\n\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED && SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\twnd->visible = false;\n\t\t}\n\n\t\tr = {wnd->x,wnd->y,wnd->w - 30, 30};\n\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED && !wnd->is_dragged)\n\t\t\t{\n\t\t\t\twnd->is_dragged = true;\n\t\t\t\twnd->drag_x = mx - wnd->x;\n\t\t\t\twnd->drag_y = my - wnd->y;\n\t\t\t}\n\t\t}\n\n\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_HELD && wnd->is_dragged)\n\t\t{\n\t\t\tSDL_SetCursor(SDLUI_Core.cursor_arrow);\n\t\t\ti32 old_x = wnd->x;\n\t\t\ti32 old_y = wnd->y;\n\t\t\twnd->x = mx - wnd->drag_x;\n\t\t\twnd->y = my - wnd->drag_y;\n\n\t\t\tfor (int i = 0; i < wnd->children.size; ++i)\n\t\t\t{\n\t\t\t\twnd->children.data[i]->x += wnd->x - old_x;\n\t\t\t\twnd->children.data[i]->y += wnd->y - old_y;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\treturn false;\n}\n\nbool SDLUI_Button(SDLUI_Control_Button *btn)\n{\n\tbtn->do_process = true;\n\n\tif(btn->visible && btn->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\n\t\tSDL_Rect r = {btn->x,btn->y,btn->w,btn->h};\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t{\n\t\t\t\tbtn->state = SDLUI_BUTTON_STATE_CLICK;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_HELD)\n\t\t\t{\n\t\t\t\tbtn->state = SDLUI_BUTTON_STATE_CLICK;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbtn->state = SDLUI_BUTTON_STATE_HOVER;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tbtn->state = SDLUI_BUTTON_STATE_NORMAL;\n\t\treturn false;\n\t}\n\n\tbtn->state = SDLUI_BUTTON_STATE_NORMAL;\n\treturn false;\n}\n\nbool SDLUI_SliderInt(SDLUI_Control_SliderInt *si)\n{\n\tsi->do_process = true;\n\n\tif(si->visible && si->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\n\t\tSDL_Rect r = {si->x,si->y,si->w,si->h};\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t{\n\t\t\t\t// if(si->orientation == SDLUI_ORIENTATION_HORIZONTAL)\n\t\t\t\t// {\n\t\t\t\t// \tsi->value = SDLUI_Map(si->x, si->x + si->w, si->min, si->max, mx);\n\t\t\t\t// }\n\t\t\t\t// else\n\t\t\t\t// {\n\t\t\t\t// \tsi->value = SDLUI_Map(si->y + si->h, si->y, si->min, si->max, my);\n\t\t\t\t// }\n\n\t\t\t\tsi->is_changing = true;\n\t\t\t}\n\t\t}\n\n\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_HELD && si->is_changing)\n\t\t{\n\t\t\tif(si->orientation == SDLUI_ORIENTATION_HORIZONTAL)\n\t\t\t{\n\t\t\t\tsi->value = SDLUI_Map(si->x, si->x + si->w, si->min, si->max, mx);\n\t\t\t\tsi->value = SDLUI_Clamp(si->value, si->min, si->max);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsi->value = SDLUI_Map(si->y + si->h, si->y, si->min, si->max, my);\n\t\t\t\tsi->value = SDLUI_Clamp(si->value, si->min, si->max);\n\t\t\t}\n\n\t\t\t// NOTE: Return here or on mouse release?\n\t\t\treturn true;\n\t\t}\n\n\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_RELEASED && si->is_changing)\n\t\t{\n\t\t\tsi->is_changing = false;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t//si->is_changing = false;\n\treturn false;\n}\n\nbool SDLUI_CheckBox(SDLUI_Control_CheckBox *chk)\n{\n\tchk->do_process = true;\n\n\tif(chk->visible && chk->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\n\t\tSDL_Rect r = {chk->x,chk->y,chk->w,chk->h};\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t{\n\t\t\t\tchk->checked = !chk->checked;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\treturn false;\n}\n\nbool SDLUI_ToggleButton(SDLUI_Control_ToggleButton *tb)\n{\n\ttb->do_process = true;\n\n\tif(tb->visible && tb->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\n\t\tSDL_Rect r = {tb->x,tb->y,tb->w,tb->h};\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t{\n\t\t\t\ttb->checked = !tb->checked;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\treturn false;\n}\n\nbool SDLUI_RadioButton(SDLUI_Control_RadioButton *rb)\n{\n\trb->do_process = true;\n\n\tif(rb->visible && rb->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\n\t\tSDL_Rect r = {rb->x,rb->y,rb->w,rb->h};\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t{\n\t\t\t\tSDLUI_Control_RadioButton *cur;\n\n\t\t\t\tfor (int i = 0; i < rb->group->size; ++i)\n\t\t\t\t{\n\t\t\t\t\tcur = (SDLUI_Control_RadioButton*)rb->group->data[i];\n\t\t\t\t\tcur->checked = false;\n\t\t\t\t}\n\n\t\t\t\trb->checked = true;\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\treturn false;\n}\n\nbool SDLUI_Text(SDLUI_Control_Text *txt)\n{\n\ttxt->do_process = true;\n\n\tif(txt->visible && txt->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool SDLUI_TabContainer(SDLUI_Control_TabContainer *tbc)\n{\n\ttbc->do_process = true;\n\n\tif(tbc->visible && tbc->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\t\tSDL_Rect r = {tbc->x,tbc->y,tbc->w,tbc->bar_height};\n\t\tSDL_Rect tab_r;\n\t\ti32 offset = 0;\n\t\tSDLUI_Control_Tab *tab;\n\n\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t{\n\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < tbc->tabs.size; ++i)\n\t\t\t\t{\n\t\t\t\t\ttab = (SDLUI_Control_Tab*)tbc->tabs.data[i];\n\t\t\t\t\ttab_r = {tbc->x + offset, tbc->y, tab->w + SDLUI_MARGIN, 30};\n\n\t\t\t\t\tif(SDLUI_PointInRect(tab_r, mx, my))\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int j = 0; j < tbc->active_tab->children.size; ++j)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSDLUI_Control *ctrl = tbc->active_tab->children.data[j];\n\t\t\t\t\t\t\tctrl->visible = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttbc->active_tab = tab;\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += SDLUI_MARGIN + tab->w;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nbool SDLUI_ScrollArea(SDLUI_Control_ScrollArea *sa)\n{\n\tsa->do_process = true;\n\n\tif(sa->visible && sa->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\ti32 mx, my;\n\t\tSDL_GetMouseState(&mx, &my);\n\t\tSDL_Rect r, rv, rh;\n\n\t\tr = {sa->x, sa->y, sa->w, sa->h};\n\n\t\tif(sa->content_height > sa->h)\n\t\t{\n\t\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t\t{\n\t\t\t\t// mouse wheel vertical\n\t\t\t\tif(SDLUI_Core.mouse_wheel_y != 0)\n\t\t\t\t{\n\t\t\t\t\tsa->scroll_y -= SDLUI_Core.mouse_wheel_y;\n\t\t\t\t\tsa->scroll_y = SDLUI_Clamp(sa->scroll_y, 0, sa->track_size_v - sa->thumb_size_v);\n\t\t\t\t\tSDLUI_Core.mouse_wheel_y = 0;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstatic i32 my_offset;\n\n\t\t\trv = {sa->x + sa->w - sa->scrollbar_thickness, sa->y + sa->scroll_y, sa->scrollbar_thickness, sa->thumb_size_v};\n\t\t\tif(SDLUI_PointInRect(rv, mx, my))\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t\t{\n\t\t\t\t\tmy_offset = my - sa->scroll_y;\n\t\t\t\t\tsa->is_changing_v = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// scroll per page\n\t\t\trv.y = sa->y;\n\t\t\trv.h = sa->scroll_y;\n\n\t\t\tif(SDLUI_PointInRect(rv, mx, my))\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t\t{\n\t\t\t\t\tfloat pages = (float)sa->content_height / (float)sa->h;\n\t\t\t\t\tfloat pixels_per_page = (float)sa->track_size_v / pages;\n\t\t\t\t\tsa->scroll_y -= pixels_per_page;\n\t\t\t\t\tsa->scroll_y = SDLUI_Clamp(sa->scroll_y, 0, sa->track_size_v - sa->thumb_size_v);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trv.y = sa->y + sa->scroll_y + sa->thumb_size_v;\n\t\t\trv.h = sa->track_size_v - sa->thumb_size_v - sa->scroll_y;\n\n\t\t\tif(SDLUI_PointInRect(rv, mx, my))\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t\t{\n\t\t\t\t\tfloat pages = (float)sa->content_height / (float)sa->h;\n\t\t\t\t\tfloat pixels_per_page = (float)sa->track_size_v / pages;\n\t\t\t\t\tsa->scroll_y += pixels_per_page;\n\t\t\t\t\tsa->scroll_y = SDLUI_Clamp(sa->scroll_y, 0, sa->track_size_v - sa->thumb_size_v);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(sa->is_changing_v)\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_HELD)\n\t\t\t\t{\n\t\t\t\t\tsa->scroll_y = my - my_offset;\n\t\t\t\t\tsa->scroll_y = SDLUI_Clamp(sa->scroll_y, 0, sa->track_size_v - sa->thumb_size_v);\n\t\t\t\t}\n\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_RELEASED)\n\t\t\t\t{\n\t\t\t\t\tsa->is_changing_v = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (sa->content_width > sa->w)\n\t\t{\n\t\t\tif(SDLUI_PointInRect(r, mx, my))\n\t\t\t{\n\t\t\t\t// mouse wheel horizontal\n\t\t\t\tif(SDLUI_Core.mouse_wheel_x != 0)\n\t\t\t\t{\n\t\t\t\t\tsa->scroll_x += SDLUI_Core.mouse_wheel_x;\n\t\t\t\t\tsa->scroll_x = SDLUI_Clamp(sa->scroll_x, 0, sa->track_size_h - sa->thumb_size_h);\n\t\t\t\t\tSDLUI_Core.mouse_wheel_x = 0;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstatic i32 mx_offset;\n\n\t\t\trh = {sa->x + sa->scroll_x, sa->y + sa->h - sa->scrollbar_thickness, sa->thumb_size_h, sa->scrollbar_thickness};\n\t\t\tif(SDLUI_PointInRect(rh, mx, my))\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t\t{\n\t\t\t\t\tmx_offset = mx - sa->scroll_x;\n\t\t\t\t\tsa->is_changing_h = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// scroll per page\n\t\t\trh.x = sa->x;\n\t\t\trh.w = sa->scroll_x;\n\n\t\t\tif(SDLUI_PointInRect(rh, mx, my))\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t\t{\n\t\t\t\t\tfloat pages = (float)sa->content_width / (float)sa->w;\n\t\t\t\t\tfloat pixels_per_page = (float)sa->track_size_h / pages;\n\t\t\t\t\tsa->scroll_x -= pixels_per_page;\n\t\t\t\t\tsa->scroll_x = SDLUI_Clamp(sa->scroll_x, 0, sa->track_size_h - sa->thumb_size_h);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trh.x = sa->x + sa->scroll_x + sa->thumb_size_h;\n\t\t\trh.w = sa->track_size_h - sa->thumb_size_h - sa->scroll_x;\n\n\t\t\tif(SDLUI_PointInRect(rh, mx, my))\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_PRESSED)\n\t\t\t\t{\n\t\t\t\t\tfloat pages = (float)sa->content_width / (float)sa->w;\n\t\t\t\t\tfloat pixels_per_page = (float)sa->track_size_h / pages;\n\t\t\t\t\tsa->scroll_x += pixels_per_page;\n\t\t\t\t\tsa->scroll_x = SDLUI_Clamp(sa->scroll_x, 0, sa->track_size_h - sa->thumb_size_h);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(sa->is_changing_h)\n\t\t\t{\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_HELD)\n\t\t\t\t{\n\t\t\t\t\tsa->scroll_x = mx - mx_offset;\n\t\t\t\t\tsa->scroll_x = SDLUI_Clamp(sa->scroll_x, 0, sa->track_size_h - sa->thumb_size_h);\n\t\t\t\t}\n\n\t\t\t\tif(SDLUI_MouseButton(SDL_BUTTON_LEFT) == SDLUI_MOUSEBUTTON_RELEASED)\n\t\t\t\t{\n\t\t\t\t\tsa->is_changing_h = false;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn false;\n\t}\n\treturn false;\n}\n\nbool SDLUI_List(SDLUI_Control_List *lst, const char *cur_item, i32 num_items)\n{\n\tlst->do_process = true;\n\n\tif(lst->num_items != num_items)\n\t{\n\t\tlst->num_items = num_items;\n\t\tSDL_DestroyTexture(lst->scroll_area->tex_rect);\n\t\ti32 h = num_items * SDLUI_Font.height;\n\t\tlst->scroll_area->tex_rect = SDL_CreateTexture(SDLUI_Core.renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, lst->scroll_area->w, h);\n\t\tlst->scroll_area->content_width = lst->scroll_area->w;\n\t\tlst->scroll_area->content_height = h;\n\t}\n\n\tstatic i32 offset_y;\n\tstatic i32 counter;\n\n\tif(counter == 0)\n\t{\n\t\tSDLUI_SetColor(SDLUI_Core.theme.col_list_background);\n\t\tSDL_Rect r = {0, 0, lst->scroll_area->content_width, lst->scroll_area->content_height};\n\t\tSDL_SetRenderTarget(SDLUI_Core.renderer, lst->scroll_area->tex_rect);\n\t\tSDL_RenderFillRect(SDLUI_Core.renderer, &r);\n\t\tSDL_SetRenderTarget(SDLUI_Core.renderer, NULL);\n\t}\n\n\tSDL_SetRenderTarget(SDLUI_Core.renderer, lst->scroll_area->tex_rect);\n\tSDLUI_SetColor(SDLUI_Core.theme.col_highlight);\n\tSDL_Rect r = {0, lst->cur_index * SDLUI_Font.height, lst->scroll_area->w-250, SDLUI_Font.height};\n\tSDL_RenderFillRect(SDLUI_Core.renderer, &r);\n\n\tSDLUI_DrawText(SDLUI_MARGIN, offset_y, cur_item, lst->scroll_area->tex_rect);\n\toffset_y += SDLUI_Font.height;\n\tcounter++;\n\n\tif(counter == num_items)\n\t{\n\t\toffset_y = 0;\n\t\tcounter = 0;\n\t}\n\n\tif(lst->visible && lst->parent == SDLUI_Core.active_window && SDLUI_Core.active_window->is_hovered)\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}",
			"file": "sdlui_usage.cpp",
			"file_size": 12247,
			"file_write_time": 132440634132531096,
			"settings":
			{
				"buffer_size": 12232,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdlui_render.cpp",
			"settings":
			{
				"buffer_size": 15485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdlui_demo_controls_create.cpp",
			"settings":
			{
				"buffer_size": 4740,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sdlui_demo_controls_usage.cpp",
			"settings":
			{
				"buffer_size": 3771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/test_build.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					""
				],
				[
					"Packages/User/test_build.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/test_build.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					""
				],
				[
					"Packages/User/test_build.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					"Build"
				]
			],
			[
				"Packages/User/test_build.sublime-build",
				"Build"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					""
				]
			],
			[
				"Packages/User/test_build.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					""
				],
				[
					"Packages/User/test_build.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/test_build.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					""
				],
				[
					"Packages/User/test_run.sublime-build",
					""
				]
			],
			[
				"Packages/User/test_build.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/test_build.sublime-build",
					""
				],
				[
					"Packages/User/test_build.sublime-build",
					"Run"
				],
				[
					"Packages/User/test_build.sublime-build",
					"Build"
				]
			],
			[
				"Packages/User/test_build.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"rename",
				"Rename File"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Snippet: swi",
				"Snippet: switch"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"rei",
				"Indentation: Reindent Lines"
			],
			[
				"reid",
				"Indentation: Reindent Lines"
			],
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"cou",
				"Snippet: cout"
			],
			[
				"printf",
				"Snippet: fprintf …"
			],
			[
				"for",
				"Snippet: For Loop"
			],
			[
				"cout",
				"Snippet: cout"
			],
			[
				"snippe",
				"Snippet: snippets"
			],
			[
				"resource",
				"PackageResourceViewer: Open Resource"
			],
			[
				"snippet:for",
				"Snippet: For Loop"
			],
			[
				"snipp",
				"Snippet: struct"
			],
			[
				"the",
				"UI: Select Theme"
			],
			[
				"ident",
				"Indentation: Reindent Lines"
			],
			[
				"reide",
				"Indentation: Reindent Lines"
			],
			[
				"run",
				"Build With: C++ Single File - Run"
			],
			[
				"build",
				"Build: New Build System"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 181.0,
		"history":
		[
			"sublime.message_dialog(\"test\")",
			"sublime.version()",
			"insert(asd)",
			"insert \"aaa\"",
			"insert a",
			"?",
			"help",
			"toggle_comment",
			"calc",
			"clear",
			"cls",
			"clear",
			"?",
			"help",
			"prompt_open_file",
			"prompt_open_file()",
			"prompt_open_file",
			"switchFile()",
			"switchFile",
			"open()",
			"open(\".gitignore\")",
			"open(\"sdlui_helpers.cpp\")",
			"open(\"sdlui_usage.cpp\")",
			"open(\"sdlui_structs.cpp\")",
			"open(\"structs.cpp\")",
			"open\"structs.cpp\"",
			"structs.cpp",
			"open",
			"open structs.cpp",
			"open",
			"clear",
			"cls",
			"run"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/dev/ui"
	],
	"file_history":
	[
		"/D/dev/ui/sdlui_event.cpp",
		"/D/dev/ui/sdlui.h",
		"/D/dev/ui/sdlui_embeded.cpp",
		"/D/dev/ui/sdlui_scratch.cpp",
		"/D/dev/ui/liberation-mono.c",
		"/D/dev/ui/sdlui_render.cpp",
		"/D/dev/ui/sdlui_enums.cpp",
		"/D/dev/ui/build.bat",
		"/D/dev/ui/.gitignore",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/test_build.sublime-build",
		"/D/dev/ui/ui.sublime-project",
		"/D/sublime text 3 settings backup/Packages/User/Package Control.cache/01524fae79697630d0454ba3fabd9414",
		"/D/sublime text 3 settings backup/Packages/User/Package Control.cache/01524fae79697630d0454ba3fabd9414.info",
		"/D/sublime text 3 settings backup/Packages/jsonschema/.gitignore",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/select_line.sublime-macro",
		"/D/dev/utracker/leftpane.cpp",
		"/D/dev/ui/include/SDL_image.h",
		"/C/Users/immortalx/AppData/Local/Temp/Rar$DIa12764.25880/IMG.c",
		"/C/Users/immortalx/AppData/Local/Temp/Rar$DIa12764.22135/IMG_png.c",
		"/C/Users/immortalx/AppData/Local/Temp/Rar$DIa12764.19527/SDL_image.h",
		"/C/Users/immortalx/AppData/Local/Temp/Rar$DIa12764.9517/png.h",
		"/D/dev/ui/include/begin_code.h",
		"/D/dev/ui/include/SDL.h",
		"/D/dev/ui/res/forest2.png",
		"/D/dev/ui/build/ui.ilk",
		"/D/dev/ui/res/forest.png",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/ColorHighlighter.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/Color Highlighter/ColorHighlighter.sublime-settings",
		"/D/dev/ui/sdlui_demo_controls_usage.cpp",
		"/D/dev/ui/sdlui_usage.cpp",
		"/D/the machinery/bin/the_machinery_exe 2020-08-19 21.12.42.dmp",
		"/D/dev/ui/sdlui_helpers.cpp",
		"/D/dev/ed/main.cpp",
		"/D/dev/ed/render.cpp",
		"/D/dev/ed/globals.cpp",
		"/D/dev/ed/globals.h",
		"/D/dev/ui/sdlui_create.cpp",
		"/D/dev/ui/sdlui_demo_controls_create.cpp",
		"/D/dev/SDL_OpenGL_template/main.cpp",
		"/D/dev/ed/character.cpp",
		"/D/dev/ed/input.cpp",
		"/D/dev/ed/helpers.cpp",
		"/D/dev/ed/file.cpp",
		"/D/dev/ed/helpers.h",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/cout.sublime-snippet",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/switch.sublime-snippet",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/Themes/MarkdownEditing.tmTheme",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/Themes/Flatron.tmTheme",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/Adaptive.sublime-theme",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/C++.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/Soda Dark.sublime-theme",
		"/C/Users/immortalx/Desktop/New folder (2)/Soda Dark 3.sublime-theme",
		"/C/Users/immortalx/Desktop/New folder (2)/Soda Dark.sublime-theme",
		"/C/Users/immortalx/Desktop/New folder (2)/Soda Dark/Widget - Soda Dark.sublime-settings",
		"/C/Users/immortalx/Desktop/New folder (2)/Soda Dark/Widget - Soda Dark 3.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Installed Packages/Theme - Soda.sublime-package",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/C++11/messages/install.txt",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/HighlightBuildErrors.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/Highlight Build Errors/HighlightBuildErrors.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/Themes/Adaptive.sublime-theme",
		"/C/Users/immortalx/Desktop/New folder (2)/Default.sublime-theme",
		"/C/Users/immortalx/Desktop/New folder (2)/adaptive/Adaptive.sublime-theme",
		"/C/Users/immortalx/Desktop/New folder (2)/Snippets/#include-(#inc angle).sublime-snippet",
		"/C/Users/immortalx/Desktop/New folder (2)/Snippets/forv.sublime-snippet",
		"/C/Program Files/Sublime Text 3/Packages/C++.sublime-package",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/snippets.sublime-snippet",
		"/C/Users/immortalx/Desktop/New folder (2)/Widget - Default.hidden-color-scheme",
		"/C/Program Files/Sublime Text 3/Packages/Theme - Default.sublime-package",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/All Autocomplete/All Autocomplete.sublime-settings",
		"/C/Users/immortalx/AppData/Roaming/Sublime Text 3/Packages/User/test_run.sublime-build"
	],
	"find":
	{
		"height": 38.4
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
			"D:\\dev\\ui"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"i + 1",
			"%",
			"init",
			"client",
			"cout",
			"init",
			"col_thumb",
			"render_win",
			"col_click",
			"col_window_bg",
			"col_base",
			"setcol",
			"conte",
			"list",
			"radio",
			"init",
			"SDLUI_SetColor",
			"scroll_x",
			"SDL_RenderCopy",
			"NULL",
			", ",
			"tex_toggle",
			"SDLUI_Core",
			"renderer",
			"SDLUI_Core",
			"\n\t\t",
			"SDLUI_Colorize",
			"dst",
			"texture",
			"createte",
			"offset",
			"SDLUI_Create_RadioButtonGroup",
			"SDLUI_CreateRadioButtonGroup",
			"SDLUI_PointCollision",
			"SDLUI_Array",
			"track_length_v",
			"track_length_h",
			"SDLUI_Base",
			"clam",
			"    \n",
			"render_text",
			"createtex",
			"control_text",
			"draw",
			"app",
			"characte",
			"characters",
			"asci",
			"app",
			"index",
			"tab_lab",
			"tab_",
			"theme",
			"them",
			"high",
			"tab_l",
			"tab_la",
			"labels",
			"spac"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"col_scrollbar_thumb",
			"col_button_click",
			"col_window_bg",
			"SDLUI_CreateRadioButtonGroup",
			"SDLUI_Create_RadioButtonGroup",
			"SDLUI_PointInRect",
			"SDLUI_ArrayOfControls",
			"track_size_v",
			"track_size_h",
			"SDLUI_Core"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2189,
						"regions":
						{
						},
						"selection":
						[
							[
								1042,
								1042
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 836.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "sdlui_helpers.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11599,
						"regions":
						{
						},
						"selection":
						[
							[
								10334,
								10338
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7164.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sdlui_structs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6848,
						"regions":
						{
						},
						"selection":
						[
							[
								970,
								987
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6044.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "sdlui_create.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7736,
						"regions":
						{
						},
						"selection":
						[
							[
								7041,
								7041
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4359.2,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "sdlui_usage.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12232,
						"regions":
						{
						},
						"selection":
						[
							[
								11634,
								11634
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8380.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "sdlui_render.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15485,
						"regions":
						{
						},
						"selection":
						[
							[
								219,
								219
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "sdlui_demo_controls_create.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4740,
						"regions":
						{
						},
						"selection":
						[
							[
								3662,
								3662
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1034.4,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "sdlui_demo_controls_usage.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3771,
						"regions":
						{
							"mark":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/dot.png",
								"regions":
								[
									[
										383,
										383
									]
								],
								"scope": "mark"
							}
						},
						"selection":
						[
							[
								613,
								613
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 38.4,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 138.0
	},
	"output.exec":
	{
		"height": 158.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/test_build.sublime-build",
	"project": "ui.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"enu",
				"sdlui_enums.cpp"
			],
			[
				"sdlui",
				"sdlui.h"
			],
			[
				"enum",
				"sdlui_enums.cpp"
			],
			[
				"eve",
				"sdlui_event.cpp"
			],
			[
				"help",
				"sdlui_helpers.cpp"
			],
			[
				"creat",
				"sdlui_create.cpp"
			],
			[
				"helpe",
				"sdlui_helpers.cpp"
			],
			[
				"sdlui.h",
				"sdlui.h"
			],
			[
				"struct",
				"sdlui_structs.cpp"
			],
			[
				"creta",
				"sdlui_create.cpp"
			],
			[
				"render",
				"sdlui_render.cpp"
			],
			[
				"usag",
				"sdlui_usage.cpp"
			],
			[
				"stru",
				"sdlui_structs.cpp"
			],
			[
				"sdlui_",
				"sdlui_helpers.cpp"
			],
			[
				"rend",
				"sdlui_render.cpp"
			],
			[
				"cre",
				"sdlui_create.cpp"
			],
			[
				"mai",
				"main.cpp"
			],
			[
				"str",
				"sdlui_structs.cpp"
			],
			[
				"usa",
				"sdlui_usage.cpp"
			],
			[
				"rende",
				"sdlui_render.cpp"
			],
			[
				"main",
				"main.cpp"
			],
			[
				"structs",
				"sdlui_structs.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 84.0,
		"last_filter": "mousebutt",
		"selected_items":
		[
			[
				"mousebutt",
				"SDLUI_MouseButton"
			],
			[
				"SDLUI_Render",
				"SDLUI_Render"
			]
		],
		"width": 577.6
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 237.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
